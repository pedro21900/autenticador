#!/bin/bash

#Obtém commit
COMMIT_MSG=$(cat $1)

#Obtém quantidade de caracteres do commit
COMMIT_MSG_VAL=$(cat $1 | wc -m)

#Obtém quantidade de caracteres
RESULT=$(($COMMIT_MSG_VAL - 1))

#Limitador de caracteres inicial
NOT=("fix" "feat" "docs" "style" "refactor" "build" "test" "chore")

#Valor que obtém a branch atual
BRANCH=$(git rev-parse --abbrev-ref HEAD)

#Limitado de caracteres
LIMIT=70

#Condição dupla onde ele verifica a quantidade de caracteres e se está dentro dos padrões
function help() {
  echo "você deseja saber qual tipo de descrição usar ? , aguarde 10s ou pressione ctrl+c para cancelar"
  echo ""
  sleep 10
  echo "#fix - Commits do tipo fix indicam que seu trecho de código commitado está solucionando um problema (bug fix), (se relaciona com o PATCH do versionamento semântico).

#feat- Commits do tipo feat indicam que seu trecho de código está incluindo um novo recurso (se relaciona com o MINOR do versionamento semântico).

#docs - Commits do tipo docs indicam que houveram mudanças na documentação, como por exemplo no Readme do seu repositório. (Não inclui alterações em código).

#style - Commits do tipo style indicam que houveram alterações referentes a formatações de código, semicolons, trailing spaces, lint... (Não inclui alterações em código).

#refactor - Commits do tipo refactor referem-se a mudanças devido a refatorações que não alterem sua funcionalidade, como por exemplo, uma alteração no formato como é processada determinada parte da tela, mas que manteve a mesma funcionalidade, ou melhorias de performance devido a um code review.

#build - Commits do tipo build são utilizados quando são realizadas modificações em arquivos de build e dependências.

#test - Commits do tipo test são utilizados quando são realizadas alterações em testes, seja criando, alterando ou excluindo testes unitários. (Não inclui alterações em código)

#chore - Commits do tipo chore indicam atualizações de tarefas de build, configurações de administrador, pacotes... como por exemplo adicionar um pacote no gitignore. (Não inclui alterações em código)

Commit inicial	tada :tada:
Tag de versão	bookmark :bookmark:
Novo recurso	sparkles :sparkles:
Lista de ideias (tasks)	soon :soon:
Bugfix	bug :bug:
Documentação	books :books:
Testes	test_tube :test_tube:
Adicionando um teste	white_check_mark :white_check_mark:
Teste de aprovação	heavy_check_mark :heavy_check_mark:
Acessibilidade	wheelchair :wheelchair:
Texto	memo :pencil:
Package.json em JS	package :package:
Em progresso	construction :construction:
Arquivos de configuração	wrench :wrench:
Removendo uma dependência	heavy_minus_sign :heavy_minus_sign:
Adicionando uma dependência	heavy_plus_sign :heavy_plus_sign:
Revertendo mudanças	boom :boom:
Alterações de revisão de código	ok_hand :ok_hand:
Refatoração	recycle :recycle:
Mover/Renomear	truck :truck:

"

  exit 1
}
for i in "${NOT[@]:0}"; do
  if [[ ($RESULT < $LIMIT) && ("$COMMIT_MSG" == "$i"*) ]]; then
    echo "Você está na branch: $BRANCH"
    exit 0
  elif [[ ! "$COMMIT_MSG" == "$i"* ]]; then
    if [[ "$i" == *"chore"* ]]; then
      echo "Você está na branch: $BRANCH"
      echo "Erro : argumento sem tipo de descrição use : ${NOT[@]:0}"
      help
    fi
  elif [[ ($RESULT -gt $LIMIT) ]]; then
    echo "Você está na branch: $BRANCH"
    echo "Erro: você ultrapassou em $(($RESULT - $LIMIT)) caractere do limite atual de 70 "
    exit 1
  else
    if [[ "$i" == *"chore"* ]]; then
      echo "Você está na branch: $BRANCH"
      echo "Erro: você ultrapassou em $(($RESULT - $LIMIT)) caractere do limite atual de 70 "
      echo "Erro : argumento sem tipo de descrição use ${NOT[@]:0}"
      help
    fi
  fi
done
